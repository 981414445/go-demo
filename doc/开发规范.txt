背景
    制定统一的开发规范，方便团队代码统一风格，提高团队协作效率，利于项目维护。
    此条规范为初版，参考了互联网社区/论坛等建议，有任何合理化建议或者在实际开发生产中有任何问题，都可商讨进行新增or修改。

说明
    统一工作目录结构，避免随意起名目录及文件
    规范结构体/方法/变量及接口名
    规范注释定义和格式
    单元测试/接口性能等建议
    (S)建议 (M)必须

一、代码组织结构
  (M) 一个目录只包含一个包，模块复杂拆分子模块/子目录
  (M) 非测试文件(*_test.go)禁止使用，简化包
  (M) 禁止相对路径导入包
  (M) 项目使用go mod 进行包管理，冲突、强制版本写在go mod 文件中
  (M) 项目整体结构参照gitlab中go-demo项目目录结构
  (S) 目录命名等推荐使用英文，中文拼音可以接受，但希望少出现错别单词
  (S) 建议go imports或者IDE管理import

二、代码风格
  (M) 变量命名统一使用驼峰标准，禁止使用下划线。大驼峰(首字母大写)为public 函数或结构体变量，小驼峰为私有变量/函数
  (M) 禁止定义未使用变量，花括号写在同一行。代码提交必须使用gofmt格式化代码。ide(goland)快捷键command+option+L
  (M) 文件名必须小写，允许下划线'_’，但头尾不能。避免与_test.go或者系统相关_386.go等冲突
  (S) 文件名以功能为指引，不需要再出现模块名
  (M) 接口名大小写驼峰法，首字母大写，不能下划线，名词
  (S) 避免全局变量多使用，for循环可用单字母
  (M) 变量名不允许下划线，大小写驼峰法，局部变量首字母小写，全局变量首字母大写
  (S) 函数参数按紧密程度安排位置，同类型参数应该相邻
  (M) 函数参数首字母小写，不能有下划线，按大小驼峰法
  (M) 常量和枚举名，全大写+下划线
  (S) 函数名建议动词或者动宾结构单词，结构体建议名词或者动名词
  (S) 包名尽量与目录名一致
  (M) 包名必须全部小写，无下划线，越短越好，尽量不要与标准库重名，禁止通过中划线连接多个单词
  (M) 目录名必须小写，允许中划线'_'，但头尾不能
  (M) 复杂功能请多写注释备注，注释表达需清晰，不啰嗦。注释标准暂时不强制，最好参考godoc，如包注释使用/**/,首字母大写，注释后空一行，函数注释写在函数上方。
整体记住大小驼峰使用、public大驼峰、private小驼峰、注释要写、少用符号。

三、单元测试/接口性能
  (S) 建议少使用main方法测试，而是使用_test.go做测试
  (S) 核心模块，强烈建议编写单元测试，基准测试
  (M) 与其他语言类似，避免多级if或者for嵌用，代码层次需简单，逻辑清晰，
  (M) 减少http 多次调用、for循环嵌套数据库查询，减少sql 操作，尽量转为脚本执行、运算
  (M) 请熟悉Go语言各特征，避免低效用法。例如：内存对齐，内存分配等
  (S) 接口响应时长控制在毫秒级别以内，300ms以上考虑优化。
  (M) 提测/测试中/上线前，跟进功能测试and 接口测试，性能监控。核心单元，请求组内进行代码review

四、日志规范
  (M) 项目中日志统一用utils 包中封装的logger 方法，warn debug info error，warn 和error 会产生告警信息，接入平台。
  (S) 日志收集统一为logger方法输出的json 日志，其他日志将不会接入ELK。
  (S) logger方法infof为format 输出，自定义json串用infow方法。

五、git工作规范
  (M) 强烈按照git 工作流方式，master主干代码、release 发布分支、develop开发分支、test分支、feature_功能名、hotfix_修复分支、tag上线版本号：x_y_z 方式
  (M) 所有commit log 、push log、tag log、merge log 必须写明清楚详细，严禁出现只有fix、update。
  (S) 代码merge release、上线前，开发者可申请组内成员进行代码review，保证代码简洁、高效性和互相学习。
  (M) 严禁将代码私自复制上传到github、gitee等平台。鼓励开源精神，但不允许未经公司同意，私自发布。

六、开发提测流程规范
  (M) 产品需求评审通过后、开发需在自给定时间范围内，制定技术设计文档，包含功能点的设计实现，如数据库表字段设计、缓存设计、方案设计实现等
  (M) 技术设计方案通过后，必须编写接口文档，写明uri、请求体、返回体等、要求简洁有效
  (M) 开发过程中&提测前，必须完成接口自测通过和功能测试通过。要有owner意识，推动项目进度。根据测试同学的测试用例，完成自测
  (S) 时间允许情况下，推荐代码review和内部分享讨论技术方案
  (M) 开发分支feature_功能名，分支名简洁明了，如feature_login，测试分支提交到test。
  (S) 开发、测试过程中，推崇多了解、多沟通，和产品、测试保持需求一致，问题变更一致

七、mysql库表设计&接口规范
1.mysql库表约束统一规则
  (M) 字段涉及UID的，统一类型约束为bigint(20).
  (M) type/status等枚举类型，统一类型约束为tinyint。有无符号可根据实际场景制定，建议为无符号。
  (M) varchar 默认为empty，尽量不使用NULL，字符集为utf8mb4
  (S) 建议减少宽表的创建，如必须则建立扩展表，减少字段的冗余
  (M) 表的关联尽量使用id
  (M) 库名的前缀统一为xdr，表名可自由选择设定，但名称要言简意赅
  (M) 表字段有业务变化，尽量统一使用create_time、update_time，类型为timestamp，存时间戳，可使用mysql默认时间函数
  (S) 时间类型建议存储时间戳，可使用mysql默认时间戳
  (S) 一些特性需开启mysql mode，尽量变量对mode的依赖，寻找可替代方案
2.接口约束规则
  (M) 请求协议：接口请求统一为http，对外https，请求header携带req_id。其它可自定义header中。数据格式统一为json
  (S) 请求body体参数言简意赅，标明key/value，尽量使用统一明确的类型，有条件下可注意排列顺序
  (S) 请求参数建议使用下划线风格，如用户角色：user_role，尽量和数据库一致
  (M) 返回格式统一为json，包含code，msg，data。
  code为int类型，0代表success，大于0为具体错误码；
  msg为string类型，内容为具体的错误信息(中英文都可);
  data为数据/对象/字符串，接口返回时统一约束清晰，避免出现返回类型为数组，空值却时使用""，应该使用[]。
  (S) 建议分页返回参数为cur_page:当前页，total:总条数，page_limit:分页数/每页条数，page_count:总页数。int 类型
  (S) 接口名称自由定义，建议建立明确的分组规则，便于后期基于接口级的网关代理等开发。
  (M) 接口要完成自测，包含响应时长等
  (M) 接口文档统一输出yapi平台
  (S) 接口的返回和格式尽量保证高可用性和扩展性，eg:
  data: { "id": 110, "info": {"name": "test", "say": "helloWord", "address": "beijing"}, "time": "2020-06-20 17:02:04"} (建议)
  data: { "id": 110, "info": "test-helloWord-beijing", "time": "1592643724"} (不建议)
  platform string android/ios 平台
  version_code uint64 版本code
  version_name string 版本名称

  (M) C端 header content-type 统一为application/x-www-form-urlencoded